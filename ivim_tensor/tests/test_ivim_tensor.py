import numpy as np
from numpy import array
from dipy.core.gradients import gradient_table
from dipy.sims.voxel import multi_tensor
from ivim_tensor import IvimTensorModel

def test_ivim_tensor():
    bvals = array([  
        10.,   40.,   60.,   80.,  100.,  150.,  200.,  300.,  500.,
        700.,  800.,  900., 1000.,   10.,   40.,   60.,   80.,  100.,
        150.,  200.,  300.,  500.,  700.,  800.,  900., 1000.,   10.,
         40.,   60.,   80.,  100.,  150.,  200.,  300.,  500.,  700.,
        800.,  900., 1000.,   10.,   40.,   60.,   80.,  100.,  150.,
        200.,  300.,  500.,  700.,  800.,  900., 1000.,   10.,   40.,
         60.,   80.,  100.,  150.,  200.,  300.,  500.,  700.,  800.,
        900., 1000.,   10.,   40.,   60.,   80.,  100.,  150.,  200.,
        300.,  500.,  700.,  800.,  900., 1000.,    0.])

    bvecs = array(
        [[-1.00000e+00, -3.40515e-09,  0.00000e+00],
           [-1.00000e+00, -3.40515e-09,  0.00000e+00],
           [-1.00000e+00, -3.40515e-09,  0.00000e+00],
           [-1.00000e+00, -3.40515e-09,  0.00000e+00],
           [-1.00000e+00, -3.40515e-09,  0.00000e+00],
           [-1.00000e+00, -3.40515e-09,  0.00000e+00],
           [-1.00000e+00, -3.40515e-09,  0.00000e+00],
           [-1.00000e+00, -3.40515e-09,  0.00000e+00],
           [-1.00000e+00, -3.40515e-09,  0.00000e+00],
           [-1.00000e+00, -3.40515e-09,  0.00000e+00],
           [-1.00000e+00, -3.40515e-09,  0.00000e+00],
           [-1.00000e+00, -3.40515e-09,  0.00000e+00],
           [-1.00000e+00, -3.40515e-09,  0.00000e+00],
           [ 3.40515e-09,  1.00000e+00,  0.00000e+00],
           [ 3.40515e-09,  1.00000e+00,  0.00000e+00],
           [ 3.40515e-09,  1.00000e+00,  0.00000e+00],
           [ 3.40515e-09,  1.00000e+00,  0.00000e+00],
           [ 3.40515e-09,  1.00000e+00,  0.00000e+00],
           [ 3.40515e-09,  1.00000e+00,  0.00000e+00],
           [ 3.40515e-09,  1.00000e+00,  0.00000e+00],
           [ 3.40515e-09,  1.00000e+00,  0.00000e+00],
           [ 3.40515e-09,  1.00000e+00,  0.00000e+00],
           [ 3.40515e-09,  1.00000e+00,  0.00000e+00],
           [ 3.40515e-09,  1.00000e+00,  0.00000e+00],
           [ 3.40515e-09,  1.00000e+00,  0.00000e+00],
           [ 3.40515e-09,  1.00000e+00,  0.00000e+00],
           [ 0.00000e+00,  0.00000e+00,  1.00000e+00],
           [ 0.00000e+00,  0.00000e+00,  1.00000e+00],
           [ 0.00000e+00,  0.00000e+00,  1.00000e+00],
           [ 0.00000e+00,  0.00000e+00,  1.00000e+00],
           [ 0.00000e+00,  0.00000e+00,  1.00000e+00],
           [ 0.00000e+00,  0.00000e+00,  1.00000e+00],
           [ 0.00000e+00,  0.00000e+00,  1.00000e+00],
           [ 0.00000e+00,  0.00000e+00,  1.00000e+00],
           [ 0.00000e+00,  0.00000e+00,  1.00000e+00],
           [ 0.00000e+00,  0.00000e+00,  1.00000e+00],
           [ 0.00000e+00,  0.00000e+00,  1.00000e+00],
           [ 0.00000e+00,  0.00000e+00,  1.00000e+00],
           [ 0.00000e+00,  0.00000e+00,  1.00000e+00],
           [ 7.04358e-01, -8.80947e-02, -7.04358e-01],
           [ 7.04358e-01, -8.80947e-02, -7.04358e-01],
           [ 7.04358e-01, -8.80947e-02, -7.04358e-01],
           [ 7.04358e-01, -8.80947e-02, -7.04358e-01],
           [ 7.04358e-01, -8.80947e-02, -7.04358e-01],
           [ 7.04358e-01, -8.80947e-02, -7.04358e-01],
           [ 7.04358e-01, -8.80947e-02, -7.04358e-01],
           [ 7.04358e-01, -8.80947e-02, -7.04358e-01],
           [ 7.04358e-01, -8.80947e-02, -7.04358e-01],
           [ 7.04358e-01, -8.80947e-02, -7.04358e-01],
           [ 7.04358e-01, -8.80947e-02, -7.04358e-01],
           [ 7.04358e-01, -8.80947e-02, -7.04358e-01],
           [ 7.04358e-01, -8.80947e-02, -7.04358e-01],
           [-7.04358e-01,  7.04358e-01,  8.80947e-02],
           [-7.04358e-01,  7.04358e-01,  8.80947e-02],
           [-7.04358e-01,  7.04358e-01,  8.80947e-02],
           [-7.04358e-01,  7.04358e-01,  8.80947e-02],
           [-7.04358e-01,  7.04358e-01,  8.80947e-02],
           [-7.04358e-01,  7.04358e-01,  8.80947e-02],
           [-7.04358e-01,  7.04358e-01,  8.80947e-02],
           [-7.04358e-01,  7.04358e-01,  8.80947e-02],
           [-7.04358e-01,  7.04358e-01,  8.80947e-02],
           [-7.04358e-01,  7.04358e-01,  8.80947e-02],
           [-7.04358e-01,  7.04358e-01,  8.80947e-02],
           [-7.04358e-01,  7.04358e-01,  8.80947e-02],
           [-7.04358e-01,  7.04358e-01,  8.80947e-02],
           [-8.80947e-02,  7.04358e-01,  7.04358e-01],
           [-8.80947e-02,  7.04358e-01,  7.04358e-01],
           [-8.80947e-02,  7.04358e-01,  7.04358e-01],
           [-8.80947e-02,  7.04358e-01,  7.04358e-01],
           [-8.80947e-02,  7.04358e-01,  7.04358e-01],
           [-8.80947e-02,  7.04358e-01,  7.04358e-01],
           [-8.80947e-02,  7.04358e-01,  7.04358e-01],
           [-8.80947e-02,  7.04358e-01,  7.04358e-01],
           [-8.80947e-02,  7.04358e-01,  7.04358e-01],
           [-8.80947e-02,  7.04358e-01,  7.04358e-01],
           [-8.80947e-02,  7.04358e-01,  7.04358e-01],
           [-8.80947e-02,  7.04358e-01,  7.04358e-01],
           [-8.80947e-02,  7.04358e-01,  7.04358e-01],
           [ 0.00000e+00,  0.00000e+00,  0.00000e+00]])

    gtab = gradient_table(bvals, bvecs, b0_threshold=0)
    
    mevals = np.array([[0.001, 0.0005, 0.0005], 
                       [0.1, 0.01, 0.01]])

    angles = [(90, 0), (90, 0)]
    itm = IvimTensorModel(gtab)
    betas = np.arange(0, 0.3, 0.05)
    for ii in range(len(betas)):
        sim = multi_tensor(gtab, mevals=mevals, snr=1000, fractions=[100 * (1-betas[ii]), 
                                                                     betas[ii] * 100])[0]
        itf = itm.fit(np.array([sim]))
        
        assert np.allclose(itf.perfusion_fraction, betas[ii], atol=7)